// Mocks generated by Mockito 5.4.2 from annotations
// in todo_mobile_app/test/features/todo_list/data/repositories/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_mobile_app/core/network/network_info.dart' as _i3;
import 'package:todo_mobile_app/features/todo_list/data/datasources/task_remote_data_source.dart'
    as _i4;
import 'package:todo_mobile_app/features/todo_list/data/models/task_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnit_0 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i4.TaskRemoteDataSource {
  MockTaskRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Unit> addTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewAllTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewCompletedTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewPendingTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewPendingTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<_i6.TaskModel?>? searchTask(int? id) =>
      (super.noSuchMethod(Invocation.method(
        #searchTask,
        [id],
      )) as _i5.Future<_i6.TaskModel?>?);
  @override
  _i5.Future<_i2.Unit> editTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #editTask,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #editTask,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<_i2.Unit> delete(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #delete,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<_i2.Unit> markComplete(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #markComplete,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #markComplete,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock
    implements _i4.TaskRemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Unit> addTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewAllTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewCompletedTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewCompletedTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<List<_i6.TaskModel>> viewPendingTasks() => (super.noSuchMethod(
        Invocation.method(
          #viewPendingTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);
  @override
  _i5.Future<_i6.TaskModel?>? searchTask(int? id) =>
      (super.noSuchMethod(Invocation.method(
        #searchTask,
        [id],
      )) as _i5.Future<_i6.TaskModel?>?);
  @override
  _i5.Future<_i2.Unit> editTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #editTask,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #editTask,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<_i2.Unit> delete(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #delete,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
  @override
  _i5.Future<_i2.Unit> markComplete(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #markComplete,
          [task],
        ),
        returnValue: _i5.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #markComplete,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Unit>);
}
